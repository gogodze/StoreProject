name: "[🛠️] Build and deploy - staging"

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

env:
  NETCORE_VERSION: "9.0.x"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOCKER_IMAGE_NAME: gogodze/store-staging

jobs:
  test:
    name: "[🧪] Test"
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest

    steps:
      - name: "[🛎️] Checkout"
        uses: actions/checkout@v4

      - name: "[🏢] Setup dotnet"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.NETCORE_VERSION }}

      - name: "[🔃] Load nuget cache"
        id: nuget-cache
        uses: actions/cache@v4
        with:
          path: "~/.nuget/packages"
          key: "${{ runner.os }}-nuget-api-${{ hashFiles('**/*.csproj') }}"
          restore-keys: "${{ runner.os }}-nuget-api-"

      - name: "[✅] Cache status"
        run: |
          echo "Cache hit: ${{ steps.nuget-cache.outputs.cache-hit }}"

      - name: "[📦] Restore packages"
        run: dotnet restore --verbosity minimal

      - name: "[🧪] Run tests"
        run: dotnet test --no-restore --verbosity minimal


  build-and-push:
    name: "[🛠️] Build and push image"
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: "[🛎️] Checkout"
        uses: actions/checkout@v4

      - name: "[🐳] Set up Docker Buildx"
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: "[🔑] Login to Docker Hub"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "[🐳] Build and Push Docker Image"
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            USER_ID=1000
            GROUP_ID=1000
            USERNAME=shipping

  restart-cluster:
    name: "[🔄] Restart Cluster on Droplet"
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest
    needs: [ build-and-push ]

    steps:
      - name: "[🛎️] Checkout"
        uses: actions/checkout@v4

      - name: "[🔑] Set up SSH key"
        run: |
          mkdir -pv -m 700 $HOME/.ssh
          echo hi > $HOME/.ssh/known_hosts
          ssh-keyscan -H "${{ secrets.SSH_HOST }}" > $HOME/.ssh/known_hosts
          echo "${{ secrets.SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 400 $HOME/.ssh/id_rsa

      - name: "[🚀] Deploy to Droplet"
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          pwd
          ls -la
          scp -P $SSH_PORT docker-compose.yml $SSH_USER@$SSH_HOST:/home/david/Programs/store/docker-compose.yml
          
          echo "--- Deploying to server ---"
          ssh -p $SSH_PORT $SSH_USER@$SSH_HOST << EOF
            set -e

            echo "Logging into docker hub"
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            echo "Pulling latest Docker image: ${{ env.DOCKER_IMAGE_NAME }}:latest"
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          
            echo "Stopping and removing old containers (docker compose down)..."
            docker compose down
          
            echo "Starting new containers (docker compose up -d)..."
            docker compose up -d
          
            echo "Deployment complete."
          EOF
